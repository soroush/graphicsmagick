Items large and small which remain to be done before Magick++ 1.0
--------------------------------------------------------------------

* Support an efficient yet simple way to manipulate image pixels and
  colormap (if pseudocolor) via an array style mechanism. Probably
  support image as a two-dimensional array of a derived class of
  Magick::Color. This is a complex problem which will take time to
  resolve since ImageMagick images are of six distinct varieties not
  including the many colorspaces the pixels can be represented in.

  Who wants this?

  Rehan Ahmad <ahmadr@eee.bham.ac.uk>
  Bill Radcliffe <BillR@corbis.com>
  Daniel M. Duley <mosfet@jorsm.com> <mosfet@kde.org> (KDE2.0 developer)
  Paul S. Mostert <pmostert@gte.net>
  Mario Olimpio de Menezes <mario@curiango.ipen.br>

* Support manipulating IPTC profiles directly. Bill Radcliffe
  <BillR@corbis.com> has agreed to write a container class to support
  this.

* Add useful thread-safety.

  To accomplish useful thread-safety I believe the following is
  required:

  - Updates to _refCount in the ImageRef object must be locked.

  - Within the ImageMagick error/warning callbacks, thread specific
    data is used to save the error associated with the current thread.

  - After the ImageMagick function returns, the thread specific data
    is checked for an error associated with the current thread.

* Integrate with GdkMagick.

* Port to Sun Workshop 5.0 under Solaris (no access to compiler yet
  but hope so soon ...)

* Support building working dynamic library under Unix.

* Support building working DLL under Win32.

* Documentation based on Framemaker sources which produce Postscript,
  PDF, and HTML outputs.  Status: documentation for Magick++ is
  included in the ImageMagick documentation which is distributed
  as a PDF file.  HTML generation not yet ready for use.

Items which will require the aid of volunteers.  Volunteers?
--------------------------------------------------------------------

* Port to CodeWarrior Professional 5.0 (released in June) under NT

* Port to Borland C++ Builder 4.0 (http://www.borland.com/)

* Port to EDG C++ (multi-platform) compiler (http://www.edg.com/)

* Port to HP-UX C++ compiler

* Port to AIX C Set++ compiler

* Port to DEC C++ compiler

* Port to Cray C++ compiler

* Port to MacOS (with CodeWarrior)

* Port to VMS

* Provide integration with Blitz++ (http://monet.uwaterloo.ca/blitz/).
  Not sure what it would do other than aid with transformations on pixels.
