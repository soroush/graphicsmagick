Items large and small which remain to be done before Magick++ 1.0
--------------------------------------------------------------------

* Support an efficient yet simple way to manipulate image pixels and
  colormap (if pseudocolor) via an array style mechanism. Probably
  support image as a two-dimensional array of a derived class of
  Magick::Color. This is a complex problem which will take time to
  resolve since ImageMagick images are of six distinct varieties not
  including the many colorspaces the pixels can be represented in.

  Who wants this?

  Rehan Ahmad <ahmadr@eee.bham.ac.uk>
  Bill Radcliffe <BillR@corbis.com>
  Daniel M. Duley <mosfet@jorsm.com> <mosfet@kde.org> (KDE2.0 developer)
  Paul S. Mostert <pmostert@gte.net>
  Mario Olimpio de Menezes <mario@curiango.ipen.br>

* Image canvas should be DirectClass rather than PseudoClass.

* Support manipulating IPTC profiles directly. Bill Radcliffe
  <BillR@corbis.com> has agreed to write a container class to support
  this.

* Support reading an image from a BLOB in memory for at least one
  format. Bill Radcliffe <BillR@corbis.com> has done work in this area.
  Hopefully he will be able to contribute some of his work.

* Add thread-safety.  The only impact here is with error reporting
  which is synchronous through a function call (ImageMagick design).
  By ensuring that only one error may be reported at a time, and 
  storing the error report in thread-specific storage, Magick++
  will become thread safe provided that only one thread works on an
  image at one time (one thread per image).

* Port to Sun Workshop 5.0 under Solaris (no access to compiler yet
  but hope so soon ...)

* Support building dynamic library under Unix.

* Support building DLL under Win32.

* Documentation based on Framemaker sources which produce Postscript,
  PDF, and HTML outputs.  Status: in Framemaker but not yet ready for
  prime time.

Items which will require the aid of volunteers.  Volunteers?
--------------------------------------------------------------------

* Port to CodeWarrior Professional 5.0 (release in June) under NT

* Port to Borland C++ Builder 4.0 (http://www.borland.com/)

* Port to EDG C++ (multi-platform) compiler (http://www.edg.com/)

* Port to HP-UX C++ compiler

* Port to SGI C++ compiler

* Port to AIX C Set++ compiler

* Port to DEC C++ compiler

* Port to Cray C++ compiler

* Port to MacOS

* Port to VMS

* Provide integration with Blitz++ (http://monet.uwaterloo.ca/blitz/).
  Not sure what it would do other than aid with transformations on pixels.
