
UNIX/Cygwin/MinGW COMPILATION

  Note:

    Platform specific notes regarding specific operating systems may
    be found in the PLATFORMS.txt file.  This file (README.txt) provides
    generic instructions which work in most common cases.  Additional
    notes regarding Cygwin & MinGW are provided later in this file.

  Type:

    gzip -dc Open ImageMagick-5.5.1.tar.gz | tar xvf -
    cd Open ImageMagick-5.5.1

  If you do not have gzip(1), the source for the gzip package is
  available as a shell archive at

    ftp://ftp.gnu.org/gnu/gzip/gzip-1.2.4a.shar

  or as a tar archive at

    ftp://ftp.gnu.org/gnu/gzip/gzip-1.2.4a.tar

  Use 'configure' to automatically configure, build, and install
  Open ImageMagick. The configure script may be executed from the Open ImageMagick
  source directory (e.g ./configure) or from a seperate build directory by
  specifying the full path to configure (e.g.
  /src/Open ImageMagick-5.5.1/configure). The advantage of using a seperate
  build directory is that multiple Open ImageMagick builds may share the same
  Open ImageMagick source directory while allowing each build to use a unique
  set of options.

  If you are willing to accept configure's default options, and build from
  within the source directory, type:

      ./configure

  and watch the configure script output to verify that it finds everything
  that you think it should. If it does not, then adjust your environment
  so that it does.

  By default, `make install' will install the package's files
  in `/usr/local/bin', `/usr/local/man', etc. You can specify an
  installation prefix other than `/usr/local' by giving `configure'
  the option `--prefix=PATH'.  This is valuable in case you don't have
  privileges to install under the default paths or if you want to install
  in the system directories instead.

  If you are not happy with configure's choice of compiler, compilation
  flags, or libraries, you can give `configure' initial values for
  variables by specifying them on the configure command line, e.g.:

      ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

  Options which should be common to packages installed under the same
  directory heirarchy may be supplied via a 'config.site' file located
  under the installation prefix via the path ${prefix}/share/config.site
  where ${prefix} is the installation prefix.  This file is used for all
  packages installed under that prefix.  This is an example config.site
  file:

  # Configuration values for all packages installed under this prefix
  CC=gcc
  CXX=c++
  CPPFLAGS='-I/usr/local/include'
  LDFLAGS='-L/usr/local/lib -R/usr/local/lib'

  When the 'config.site' file is being used to supply configuration
  options, configure will issue a message similar to:

    configure: loading site script /usr/local/share/config.site

  The configure variables you should be aware of are:

      CC          Name of C compiler (e.g. 'cc -Xa') to use
      CXX         Name of C++ compiler to use (e.g. 'CC')
      CFLAGS      Compiler flags (e.g. '-g -O2') to compile C code
      CXXFLAGS    Compiler flags (e.g. '-g -O2') to compile C++ code
      CPPFLAGS    Include paths (-I/somedir) to look for header files
      LDFLAGS     Library paths (-L/somedir) to look for libraries
                  Systems that support the notion of a library run-path
                  may require an additional argument in order to find
                  shared libraries at run time. For example, the Solaris
                  linker requires an argument of the form '-R/somedir',
                  some Linux systems will work with '-rpath /somedir',
                  while some other Linux systems who's gcc does not pass
                  -rpath to the linker require an argument of the form
                  '-Wl,-rpath,/somedir'.
      LIBS        Extra libraries (-lsomelib) required to link

  Any variable (e.g. CPPFLAGS or LDFLAGS) which requires a directory
  path must specify an absolute path rather than a relative path.

  Configure can usually find the X include and library files
  automatically, but if it doesn't, you can use the `configure' options
  `--x-includes=DIR' and `--x-libraries=DIR' to specify their locations.

  The configure script provides a number of Open ImageMagick specific
  options.  When disabling an option --disable-something is equivalent to
  specifying --enable-something=no and --without-something is equivalent
  to --with-something=no.  The configure options are as
  follows (execute 'configure --help' to see all options).

  Optional Features:
   --enable-ccmalloc       enable 'ccmalloc' memory debug support (default disabled)
   --enable-prof           enable 'prof' profiling support (default disabled)
   --enable-gprof          enable 'gprof' profiling support (default disabled)
   --enable-gcov           enable 'gcov' profiling support (default disabled)
   --disable-largefile     disable support for large (64 bit) file offsets
   --enable-lzw            enable LZW support (default disabled)

  Optional Packages/Options:
   --with-quantum-depth    number of bits in a pixel quantum (default 16)
   --with-modules          enable support for dynamically loadable modules
   --with-cache            set pixel cache threshhold (defaults to available memory)
   --without-threads       disable threads support
   --without-frozenpaths   disable frozen delegate paths
   --without-magick-plus-plus disable build/install of Magick++
   --without-perl          disable build/install of PerlMagick
        or
   --with-perl=PERL        use specified Perl binary to configure PerlMagick
   --with-perl-options=OPTIONS  options to pass on command-line when
                           generating PerlMagick's Makefile from Makefile.PL
   --without-bzlib         disable BZLIB support
   --without-dps           disable Display Postscript support
   --without-fpx           disable FlashPIX support
   --without-gslib         disable Ghostscript library support
   --without-jbig          disable JBIG support
   --without-jpeg          disable JPEG support
   --without-jp2           disable JPEG v2 support
   --without-lcms          disable LCMS support
   --without-png           disable PNG support
   --without-tiff          disable TIFF support
   --without-ttf           disable TrueType support
   --without-wmf           disable WMF support
   --with-fontpath         prepend to default font search path
   --with-gs-font-dir      directory containing Ghostscript fonts
   --with-windows-font-dir directory containing MS-Windows fonts
   --without-xml           disable XML support
   --without-zlib          disable ZLIB support
   --with-x                use the X Window System
   --with-share-path=DIR   Alternate path to share directory
                           (default share/Open ImageMagick)
   --with-libstdc=DIR      use libstdc++ in DIR (for GNU C++)

  Open ImageMagick options represent either features to be enabled, disabled,
  or packages to be included in the build.  When a feature is enabled (via
  --enable-something), it enables code already present in Open ImageMagick.
  When a package is enabled (via --with-something), the configure script
  will search for it, and if is is properly installed and ready to use
  (headers and built libraries are found by compiler) it will be included
  in the build.  The configure script is delivered with all features
  disabled and all packages enabled. In general, the only reason to
  disable a package is if a package exists but it is unsuitable for
  the build (perhaps an old version or not compiled with the right
  compilation flags).

  Several configure options require special note:

    o --enable-shared: the shared libraries are built. Shared
      libraries are preferred because they allow programs to share
      common code, making the individual programs much smaller. In
      addition shared libraries are required in order for PerlMagick to
      be dynamically loaded by an installed PERL (otherwise an additional
      PERL (PerlMagick) must be installed. This option is not the default
      because all libraries used by Open ImageMagick must also be dynamic
      libraries if Open ImageMagick itself is to be dynamically loaded (such
      as for PerlMagick).

      Open ImageMagick built with delegates (see MAGICK PLUG-INS below)
      can pose additional challenges. If Open ImageMagick is built using
      static libraries (the default without --enable-shared) then
      delegate libraries may be built as either static libraries or
      shared libraries. However, if Open ImageMagick is built using shared
      libraries, then all delegate libraries must also be built as
      shared libraries.  Static libraries usually have the extension .a,
      while shared libraries typically have extensions like .so, .sa,
      or .dll. Code in shared libraries normally must compiled using
      a special compiler option to produce Position Independent Code
      (PIC). The only time this is not necessary is if the platform
      compiles code as PIC by default.

      PIC compilation flags differ from vendor to vendor (gcc's is
      -fPIC). However, you must compile all shared library source with
      the same flag (for gcc use -fPIC rather than -fpic). While static
      libraries are normally created using an archive tool like 'ar',
      shared libraries are built using special linker or compiler options
      (e.g. -shared for gcc).

      Building shared libraries often requires subtantial hand-editing
      of Makefiles and is only recommended for those who know what they
      are doing.

      If --enable-shared is not specified, a new PERL interpreter
      (PerlMagick) is built which is statically linked against the
      PerlMagick extension. This new interpreter is installed into the
      same directory as the Open ImageMagick utilities. If --enable-shared
      is specified, the PerlMagick extension is built as a dynamically
      loadable object which is loaded into your current PERL interpreter
      at run-time. Use of dynamically-loaded extensions is preferable over
      statically linked extensions so --enable-shared should be specified
      if possible (note that all libraries used with Open ImageMagick must
      be shared libraries!).

    o --disable-static: static archive libraries (with extension .a)
      are not built.  If you are building shared libraries, there
      is little value to building static libraries. Reasons to build
      static libraries include: 1) they can be easier to debug; 2) the
      clients do not have external dependencies (i.e. libMagick.so); 3)
      building PIC versions of the delegate libraries may take additional
      expertise and effort; 4) you are unable to build shared libraries.

    o --with-modules: image format coders are built as loadable modules
      which are installed in [prefix]/lib/Open ImageMagick/modules/coders.
      Support for modules allows the formats supported by Open ImageMagick
      to be extended by simply adding additional modules to the module
      search path.  The modules option is only available in conjunction
      with --enable-shared.  If --enable-shared is not also specified,
      then support for modules is disabled.

    o --enable-lzw: Unisys claims a patent on the algorithm supporting
      LZW compression (e.g. used by GIF and TIFF). To avoid possibly
      infringing on this patent, support for LZW is disabled by default.
      With LZW support, GIF files written by Open ImageMagick will be much
      larger than expected. Note that the TIFF library must be patched
      in order to support LZW compression, and that this support must
      be explicitly enabled in the libtiff Makefiles.

    o --with-quantum-depth: This option allows the user to specify the
      number of bits to use per pixel quantum (the size of the red,
      green, blue, and alpha pixel components. For example,
      "--with-quantum-depth=8" builds Open ImageMagick using 8-bit quantums.
      Most computer display adaptors use 8-bit quantums. Currently
      supported arguments are 8, 16, or 32. The default is 16. This
      option is the most important option in determining the overall
      run-time performance of Open ImageMagick.

      The number of bits in a quantum determines how many values it may
      contain. Each quantum level supports 256 times as many values as
      the previous level. The following table shows the range available
      for various quantum sizes.

          QuantumDepth  Valid Range (Decimal)  Valid Range (Hex)
                8            0-255                   00-FF
               16           0-65535                0000-FFFF
               32         0-4294967295         00000000-FFFFFFFF

      Larger pixel quantums cause Open ImageMagick to run more slowly and to
      require more memory. For example, using sixteen-bit pixel quantums
      causes Open ImageMagick to run 15% to 50% slower (and take twice as
      much memory) than when it is built to support eight-bit pixel
      quantums.

      The amount of virtual memory consumed by an image can be computed
      by the equation (QuantumDepth*Rows*Columns*5)/8. This is an
      important consideration when resources are limited, particularly
      since processing an image may require several images to be in
      memory at one time. The following table shows memory consumption
      values for a 1024x768 image:

          QuantumDepth  Virtual Memory
              8              3MB
             16              8MB
             32             15MB

    o --without-magick-plus-plus: Disable building Magick++, the C++
      application programming interface to Open ImageMagick. A suitable C++
      compiler is required in order to build Magick++. Specify the CXX
      configure variable to select the C++ compiler to use (default
      "g++"), and CXXFLAGS to select the desired compiler opimization
      and debug flags (default "-g -O2"). Antique C++ compilers will
      normally be rejected by configure tests so specifying this option
      should only be necessary if Magick++ fails to compile.

    o --without-frozenpaths: Normally full paths to external programs
      (based on searching the PATH set when configure is run) will be
      saved to the delegates.mgk file. Specify this option to disable
      saving full paths to programs.

    o --without-threads: By default, the Open ImageMagick library is compiled
      with multi-thread support.  If this is undesireable, then specify
      --without-threads.

    o --with-cache: Specify a different image pixel cache threshold
      using the --with-cache option. This sets the maximum amount of
      heap memory that Open ImageMagick is allowed to consume before
      switching to using memory-mapped temporary files to store raw
      pixel data.

    o --disable-largefile: By default, Open ImageMagick is compiled with
      support for large (> 2GB on a 32-bit CPU) files if the operating
      system supports large files.  All applications which use the
      Open ImageMagick library must then also include support for large
      files. By disabling support for large files via --disable-largefile,
      dependent applications do not require special compilation options
      for large files in order to use the library.

    o --without-perl: By default, PerlMagick is conveniently compiled
      and installed as part of Open ImageMagick's normal "configure", "make",
      "make install" process.. When --without-perl is specified, you must
      first install Open ImageMagick, change to the PerlMagick subdirectory,
      build, and finally install PerlMagick. Note, PerlMagick is
      configured even if --without-perl is specified. If the argument
      --with-perl=/path/to/perl is supplied, then /path/to/perl will be
      taken as the PERL interpreter to use. This is important in case the
      'perl' executable in your PATH is not PERL5, or is not the PERL
      you want to use.

    o --with-perl-options: The PerlMagick module is normally installed
      using the Perl interpreter's installation PREFIX, rather than
      Open ImageMagick's. If Open ImageMagick's installation prefix is not
      the same as PERL's PREFIX, then you may find that PerlMagick's
      'make install' step tries to install into a directory tree that
      you don't have write permissions to. This is common when PERL is
      delivered with the operating system or on Internet Service Provider
      (ISP) web servers. If you want PerlMagick to install elsewhere,
      then provide a PREFIX option to PERL's configuration step via
      "--with-perl-options=PREFIX=/some/place". Other options accepted by
      MakeMaker are 'LIB', 'LIBPERL_A', 'LINKTYPE', and 'OPTIMIZE'. See
      the ExtUtils::MakeMaker(3) manual page for more information on
      configuring PERL extensions.

    o --without-x: By default, Open ImageMagick will use X11 libraries if
      they are available. When --without-x is specified, use of X11 is
      disabled. The display, animate, and import programs are not built or
      installed. The remaining programs have reduced functionality such
      as no access to X11 fonts (consider using Postscript or TrueType
      fonts instead).

    o --with-gs-font-dir: Specify the directory containing the
      Ghostscript Postscript Type 1 font files (e.g. "n022003l.pfb") so
      that they can be rendered using the FreeType library. If the font
      files are installed using the default Ghostscript installation paths
      (${prefix}/share/ghostscript/fonts), they should be discovered
      automatically by configure and specifying this option is not
      necessary. Specify this option if the Ghostscript fonts fail to
      be located automatically, or the location needs to be overridden.

    o --with-windows-font-dir: Specify the directory containing
      MS-Windows-compatible fonts. This is not necessary when Open ImageMagick
      is running under MS-Windows.

  Building under Cygwin

    Open ImageMagick may be built under the Windows '95-XP Cygwin
    Unix-emulation environment available for free from

      http://www.cygwin.com/

    X11R6 for Cygwin is available from

      http://xfree86.cygwin.com/

    It is strongly recommended that the
    X11R6 package be installed since this enables Open ImageMagick's X11
    support (animate, display, and import will work) and it includes the
    Freetype v2 DLL required to support TrueType and Postscript Type 1
    fonts. Make sure that /usr/X11R6/bin is in your PATH prior to running
    configure. If you are using Cygwin version 1.3.9 or later, you may
    specify the configure option '--enable-shared' to build Cygwin DLLs.
    Specifying '--enable-shared' is required if you want to build
    PerlMagick under Cygwin because Cygwin does not provide the libperl.a
    static library required to create a static PerlMagick.

  Building under MinGW & MSYS

    Open ImageMagick may be built using the free MinGW ("Minimalistic GNU for
    Windows") package version 1.1, available from

      http://www.mingw.org

    which consists of a GNU-based (e.g. gcc) compilation toolset plus
    headers and libraries required to build programs which are entirely
    based on standard Microsoft Windows DLLs. MSYS provides a Unix-like
    console shell window with sufficient functionality to run the
    Open ImageMagick configure script and execute make.

    Unlike the Cygwin build which creates programs based on a
    Unix-emulation DLL, and which uses Unix-style paths to access
    Windows files, the MinGW build creates native Windows console
    applications similar to the Visual C++ build.

    Please note that since the MinGW build is very new, some aspects of
    the installation may vary from Windows user's expectations, and that
    only a static build (no DLLs or modules) is currently supported.

    Once MinGW & MSYS have been installed, start the MSYS console (via
    the MSYS icon on the Windows desktop) and follow the Unix configure
    and build instructions. Note that the default installation prefix is
    "/usr/local" which installs the package into a MSYS directory. To
    install outside of the MSYS directory tree, you may specify an
    installation prefix like "/c/Open ImageMagick" which causes the package
    to be installed under the Windows directory "C:\Open ImageMagick". The
    installation directory structure will look very much like the Unix
    installation layout (e.g. "C:\Open ImageMagick\bin",
    "C:\Open ImageMagick\lib", "C:\Open ImageMagick\share", etc.). Any additional
    delegate libraries (e.g. libpng) will need to be built under MinGW
    in order to be used.

  Dealing with configuration failures:

    While configure is designed to ease installation of Open ImageMagick, it
    often discovers problems that would otherwise be encountered later
    when compiling Open ImageMagick. The configure script tests for headers
    and libraries by executing the compiler (CC) with the specified
    compilation flags (CFLAGS), pre-processor flags (CPPFLAGS), and linker
    flags (LDFLAGS). Any errors are logged to the file 'config.log'. If
    configure fails to discover a header or library please review this
    log file to determine why, however, please be aware that *errors
    in the config.log are normal* because configure works by trying
    something and seeing if it fails. An error in config.log is only a
    problem if the test should have passed on your system. After taking
    corrective action, be sure to remove the 'config.cache' file before
    running configure so that configure will re-inspect the environment
    rather than using cached values.

    Common causes of configure failures are: 1) a delegate header is
    not in the header include path (CPPFLAGS -I option); 2) a delegate
    library is not in the linker search/run path (LDFLAGS -L/-R option);
    3) a delegate library is missing a function (old version?); 4)
    compilation environment is faulty.

    If all reasonable corrective actions have been tried and the
    problem appears to be due to a flaw in the configure script,
    please send a bug report to the configure script maintainer
    (currently bfriesen@simple.dallas.tx.us). All bug reports should
    contain the operating system type (as reported by 'uname -a')
    and the compiler/compiler-version. A copy of the configure script
    output and/or the config.log file may be valuable in order to find
    the problem. If you send a config.log, please also send a script of
    the configure output and a description of what you expected to see
    (and why) so the failure you are observing can be identified and
    resolved.

  Makefile Build Targets

    Once Open ImageMagick is configured, these standard build targets are
    available from the generated Makefiles:
  
       'make'
          Build the package
  
       'make install'
          Install the package
  
       'make check'
          Run tests using the installed Open ImageMagick ('make install' must
          be done first!).
  
       'make clean'
          Remove everything in the build directory created by 'make'
  
       'make distclean'
          Remove everything in the build directory created by 'configure'
          and 'make'. This is useful if you want to start over from scratch.
  
       'make uninstall'
     	Remove all files from the system which are (or would be)
     	installed by 'make install' using the current configuration.
          Note that this target is imperfect for PerlMagick since Perl
          no longer supports an 'uninstall' target.

  Build & Install:

    Now that Open ImageMagick is configured, type

       make

    to build the package and

       make install

    to install it.

  Verifying The Build:

    To confirm your installation of the Open ImageMagick distribution was
    successful, type:
  
        ./utilities/display

    The Open ImageMagick logo is displayed.
  
    If the image colors are not correct use this command:
  
        ./utilities/display -visual default
  
    For a more serious test, you may run the Open ImageMagick test suite by
    typing
  
        make check

    Note that due to differences between the developer's environment and
    your own it is possible that some tests may be indicated as failed
    even though the results are ok. Differences between the developer's
    environment environment and your own may include the compiler, the
    CPU type, and the library versions used. The Open ImageMagick developers
    use the current release of all dependent libraries.


MAGICK DELEGATES

  To further enhance the capabilities of Open ImageMagick, you may want to
  get these programs or libraries:

    o Open ImageMagick requires the BZLIB library from

        http://sourceware.cygnus.com/bzip2/index.html

      to read and write BZip compressed MIFF images.

    o Open ImageMagick requires ralcgm from

        http://www.agocg.ac.uk/train/cgm/ralcgm.htm

      to read the Computer Graphics Metafile image format (may not
      compile under linux).  You also need Ghostscript (see below).

    o Open ImageMagick requires fig2dev from

        ftp://ftp.x.org/contrib/applications/drawing_tools/transfig

      to read the Fig image format.

    o Open ImageMagick requires the FreeType software, version 2.0 or above,
      available as

        http://www.freetype.org/

      to annotate with TrueType and Postscript Type 1 fonts.

    o Open ImageMagick requires Ghostscript software available from

        http://www.cs.wisc.edu/~ghost/

      to read the Postscript or the Portable Document format. It is used
      to annotate an image when the FreeType library is not used, or an
      X server is not available. See the FreeType library above for
      another means to annotate an image. Note, Ghostscript must support
      the ppmraw device (type gs -h to verify). If Ghostscript is
      unavailable, the Display Postscript extension is used to rasterize
      a Postscript document (assuming you define HasDPS). The DPS
      extension is less robust than Ghostscript in that it will only
      rasterize one page of a multi-page document.

      Ghostscript (released 7.0 and later) may optionally install a
      library (libgs). If this library is installed, Open ImageMagick will
      attempt to use it unless the option --without-gslib is passed to
      configure. Note that Ghostscript provides its own modified version
      of libjpeg and that symbols from this libjpeg may be confused with
      symbols with the stand-alone libjpeg. If conflicts cause JPEG to
      fail, it may be necessary to use Ghostscript's copy of libjpeg for
      Open ImageMagick, and all delegate libraries which depend on libjpeg.

    o Open ImageMagick requires hp2xx available from

         http://www.gnu.org/software/hp2xx/hp2xx.html

      to read the HP-GL image format. Note that HPGL is a plotter file
      format. HP printers usually accept PCL format rather than HPGL
      format.

    o Open ImageMagick requires the LCMS library available from

         http://www.littlecms.com/

      to perform color management.

    o Open ImageMagick requires gnuplot available via anonymous FTP as

         ftp://ftp.dartmouth.edu/pub/gnuplot/gnuplot-3.7.tar.gz

      to read GNUPLOT plot files (with extension gplt).

    o Open ImageMagick requires html2ps available from

         http://www.tdb.uu.se/~jan/html2ps.html

      to read the HTML image format.

    o Open ImageMagick requires the JBIG-Kit software available via
      HTTP from

         http://www.cl.cam.ac.uk/~mgk25/jbigkit/

      or via anonymous FTP as

         ftp://ftp.informatik.uni-erlangen.de/pub/doc/ISO/JBIG/

      to read the JBIG image format.

    o Open ImageMagick requires the Independent JPEG Group's software
      available via anonymous FTP as

         ftp://ftp.uu.net/graphics/jpeg/jpegsrc.v6b.tar.gz

      to read the JPEG v1 image format.

      Apply this JPEG patch to Independent JPEG Group's source
      distribution if you want to read lossless jpeg-encoded DICOM
      (medical) images:

         ftp://ftp.imagemagick.org/pub/Open ImageMagick/delegates/ljpeg-6b.tar.gz

      Use of lossless JPEG is not encouraged. Unless you have a requirement
      to read lossless jpeg-encoded DICOM images, please disregard the patch.

    o Open ImageMagick requires the JasPer Project's Jasper library available
      via http from

         http://www.ece.uvic.ca/~mdadams/jasper/

      to read and write the JPEG v2 format.

    o Open ImageMagick requires the MPEG utilities from the MPEG Software
      Simulation Group, which are available via anonymous FTP as

         ftp://ftp.mpeg.org/pub/mpeg/mssg/mpeg2vidcodec_v12.tar.gz

      to read or write the MPEG image format.

    o Open ImageMagick requires the PNG library, version 1.0 or above, from

         http://www.libpng.org/pub/png/pngcode.html

      to read the PNG image format.

    o Open ImageMagick requires ra_ppm from Greg Ward's Radiance software
      available from

         http://radsite.lbl.gov/radiance/HOME.html

      to read the Radiance image format.

    o Open ImageMagick requires rawtorle from the Utah Raster Toolkit
      available via anonymous FTP as

         ftp://ftp.cs.utah.edu/pub/dept/OLD/pub/urt-3.1b.tar.Z

      to write the RLE image format (may not compile under linux).

    o Open ImageMagick requires scanimage from

         http://www.mostang.com/sane/
								 
      to import an image from a scanner device.

    o Open ImageMagick requires Sam Leffler's TIFF software available via
      anonymous FTP at

         ftp://ftp.remotesensing.org/pub/libtiff/

      or via HTTP at

         http://www.libtiff.org/

      to read the TIFF image format. It in turn optionally requires the
      JPEG and ZLIB libraries. Support for JPEG, ZIP, and LZW compression
      must be explicitly enabled by editing libtiff Makefiles. The TIFF
      library no longer includes support for LZW compression due to patent
      issues. If you need to use LZW compression, support is available via
      a seperate LZW compression kit (a patch) at the sites listed above.

    o Open ImageMagick requires libwmf 0.2.5 (or 0.2.2) available from

         http://sourceforge.net/projects/wvware/

      to render files in the Windows Meta File (WMF) metafile format
      (16-bit WMF files only, not 32-bit "EMF"). This is the format
      commonly used for Windows clipart (available on CD at your local
      computer or technical book store). WMF support requires the
      FreeType 2 library in order to render TrueType and Postscript fonts.

      While Open ImageMagick uses the libwmflite (parser) component of the
      libwmf package which does not depend on any special libraries, the
      libwmf package as a whole depends on FreeType 2 and either the
      xmlsoft libxml, or expat libraries. Since Open ImageMagick already uses
      libxml (for reading SVG and to retrieve files via HTTP or FTP), it
      is recommended that the options '--without-expat --with-xml' be
      supplied to libwmf's configure script.

      Open ImageMagick's WMF renderer provides some of the finest WMF
      rendering available due its use of antialiased drawing algorithms.
      You may select a background color or texture image to render on.
      For example, "-background '#ffffffff'" renders on a transparent
      background while "-texture plasma:fractal" renders on a fractal
      image.

      The WMF renderer is not capable of using Windows fonts with libwmf
      0.2.2. Windows fonts are fully supported when using libwmf 0.2.5
      or later.

    o Open ImageMagick requires the FlashPIX library version 1.2.0 from
      the Digital Imaging Group in order to support the FlashPIX
      format. The FlashPIX library may be obtained from Open ImageMagick
      anonymous CVS by checking out the 'fpx' module, or retrieving the
      file libfpx-1.2.0.4.tar.gz from the ftp directory

         ftp://ftp.imagemagick.org/pub/Open ImageMagick/delegates/.

    o Open ImageMagick requires an X server for display and animate to work
      properly. Unix systems usually provide an X server as part of
      their standard installation.

      A free X server for Microsoft Windows is available from

         http://sources.redhat.com/win32-x11/

      The Cygwin port of XFree86 may also be used. It is available from

         http://www.cygwin.com/xfree/

      There is a nearly free X server available for Windows and
      Macintosh at

         http://www.microimages.com/freestuf/mix/

    o Open ImageMagick requires libxml available from

         http://xmlsoft.org/

      to read the SVG image format and to retrieve files from over a
      network via FTP and HTTP.

    o Open ImageMagick requires the ZLIB library from

         http://www.gzip.org/zlib/

      to read or write the PNG or Zip compressed MIFF images.

    o Open ImageMagick requires a background texture for the TILE
      format and for the -texture option of montage(1).  You can use
      your own or get samples from

         http://the-tech.mit.edu/KPT/

